name: Build, Sign, and Release InterviewAssistant

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        shell: cmd
        run: |
          if exist requirements.txt (
            pip install -r requirements.txt
          )
          pip install pyinstaller

      - name: Build EXE
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          pyinstaller --onefile it.py --name InterviewAssistant
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: List dist folder (debug)
        shell: cmd
        run: dir dist

      - name: Restore signing certificate (decode Base64 secret -> signing-cert.pfx)
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          # Read secret directly (secrets are expanded at workflow runtime)
          $b64 = $null
          if ("${{ secrets.SIGNING_CERT_PFX }}" -and "${{ secrets.SIGNING_CERT_PFX }}" -ne "") {
            Write-Host "Using repository secret SIGNING_CERT_PFX."
            $b64 = "${{ secrets.SIGNING_CERT_PFX }}"
          } elseif ("${{ secrets.SIGNING_CERT_B64 }}" -and "${{ secrets.SIGNING_CERT_B64 }}" -ne "") {
            Write-Host "Using repository secret SIGNING_CERT_B64 (fallback)."
            $b64 = "${{ secrets.SIGNING_CERT_B64 }}"
          } else {
            Write-Error "No signing secret found. Please set SIGNING_CERT_PFX or SIGNING_CERT_B64 in repo secrets."
            exit 1
          }

          Write-Host "Base64 secret length:" ([int]$b64.Length)

          try {
            $bytes = [System.Convert]::FromBase64String($b64)
          } catch {
            Write-Error "Base64 decode failed: secret is not valid base64."
            exit 1
          }

          [IO.File]::WriteAllBytes("signing-cert.pfx", $bytes)
          if (-not (Test-Path -Path "signing-cert.pfx")) {
            Write-Error "Failed to write signing-cert.pfx"
            exit 1
          }
          Write-Host "✅ signing-cert.pfx restored (size: $(Get-Item signing-cert.pfx).Length bytes)"

      - name: Confirm PFX (debug)
        shell: pwsh
        run: |
          Write-Host "PFX file size:"
          Get-Item signing-cert.pfx | Select-Object Name, Length | Format-List

      - name: Find signtool dynamically
        id: find_signtool
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          Write-Host "Searching for signtool.exe in Windows Kits..."
          $signtool = Get-ChildItem "C:\Program Files (x86)\Windows Kits" -Recurse -Filter signtool.exe -ErrorAction SilentlyContinue |
                      Select-Object -First 1
          if (-not $signtool) {
            Write-Error "signtool.exe not found on this runner."
            exit 1
          }
          $full = $signtool.FullName
          Write-Host "✅ Found signtool at: $full"
          Add-Content -Path $env:GITHUB_ENV -Value "SIGNSDK=$full"

      - name: Trust signing certificate temporarily (robust)
        shell: pwsh
        env:
          SIGNING_CERT_PASSWORD: ${{ secrets.SIGNING_CERT_PASSWORD }}
        run: |
          $ErrorActionPreference = "Stop"
          Write-Host "Importing PFX to CurrentUser\\My and trusting public cert in CurrentUser\\Root (robust)."

          $pwd = ConvertTo-SecureString -String "${{ secrets.SIGNING_CERT_PASSWORD }}" -AsPlainText -Force

          # Import pfx; can return an array or single cert object
          $importResult = Import-PfxCertificate -FilePath signing-cert.pfx -CertStoreLocation Cert:\CurrentUser\My -Password $pwd -Exportable -ErrorAction Stop

          if ($null -eq $importResult) {
            Write-Error "Import-PfxCertificate returned no object. Import may have failed."
            exit 1
          }

          if ($importResult -is [System.Array]) {
            $cert = $importResult | Select-Object -First 1
          } else {
            $cert = $importResult
          }

          # If thumbprint missing, fall back to searching by subject CN
          $thumb = $cert.Thumbprint
          if (-not $thumb) {
            Write-Host "Imported object had no Thumbprint; falling back to search by subject..."
            $cert = Get-ChildItem Cert:\CurrentUser\My | Where-Object { $_.Subject -like "*CN=InterviewAssistant*" } | Select-Object -First 1
            if (-not $cert) {
              Write-Error "Could not find a certificate in CurrentUser\\My matching CN=InterviewAssistant."
              exit 1
            }
            $thumb = $cert.Thumbprint
          }

          Write-Host "Imported certificate thumbprint: $thumb"
          Write-Host "Subject: $($cert.Subject)"
          Write-Host "Issuer:  $($cert.Issuer)"

          # Confirm the cert path exists
          $certPath = "Cert:\CurrentUser\My\$thumb"
          if (-not (Test-Path $certPath)) {
            Write-Error "Certificate path $certPath not found after import."
            exit 1
          }

          # Export public cert to .cer
          $cerPath = Join-Path $PWD "signing-cert.cer"
          Export-Certificate -Cert $certPath -FilePath $cerPath -Force

          if (-not (Test-Path $cerPath)) {
            Write-Error "Failed to export public certificate to $cerPath"
            exit 1
          }

          # Import the .cer into CurrentUser\Root so verify /pa trusts the chain
          Import-Certificate -FilePath $cerPath -CertStoreLocation Cert:\CurrentUser\Root | Out-Null

          Write-Host "✅ Signing certificate temporarily trusted for CurrentUser. Exported public cert to: $cerPath"
          Write-Host "You can now sign and verify in this job run."

      - name: Sign the EXE (with robust error handling)
        shell: pwsh
        env:
          SIGNING_CERT_PASSWORD: ${{ secrets.SIGNING_CERT_PASSWORD }}
        run: |
          $ErrorActionPreference = "Stop"

          if (-not (Test-Path -Path "dist\InterviewAssistant.exe")) {
            Write-Error "dist\\InterviewAssistant.exe not found. Build step may have failed."
            exit 1
          }

          if (-not $env:SIGNSDK) {
            Write-Error "SIGNSDK path not set. Previous step should have set this."
            exit 1
          }

          Write-Host "Using signtool: $env:SIGNSDK"
          Write-Host "Signing dist\\InterviewAssistant.exe ..."

          try {
            & "$env:SIGNSDK" sign `
              /f signing-cert.pfx `
              /p "${{ secrets.SIGNING_CERT_PASSWORD }}" `
              /tr http://timestamp.digicert.com `
              /td sha256 /fd sha256 `
              dist\InterviewAssistant.exe

            $lastExit = $LASTEXITCODE
            if ($lastExit -ne 0) {
              Write-Error "signtool returned exit code $lastExit"
              throw "signtool failed with exit code $lastExit"
            }

            Write-Host "✅ Signing command completed."
            exit 0
          }
          catch {
            Write-Error "❌ Signing failed: $($_.Exception.Message)"
            Write-Host "signtool stderr/exception: $($_)"
            exit 1
          }

      - name: Verify signature
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          if (-not $env:SIGNSDK) { throw "SIGNSDK missing" }
          Write-Host "Verifying signature on dist\\InterviewAssistant.exe..."
          & "$env:SIGNSDK" verify /pa /v dist\InterviewAssistant.exe
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Signature verification failed (signtool returned $LASTEXITCODE)."
            exit 1
          }
          Write-Host "✅ Signature verified."

      - name: Remove temporary trusted signing certificate
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          Write-Host "Removing any InterviewAssistant certs from CurrentUser\\Root and CurrentUser\\My..."

          # Remove from CurrentUser\Root (trusted roots)
          $rootCerts = Get-ChildItem Cert:\CurrentUser\Root | Where-Object { $_.Subject -like "*CN=InterviewAssistant*" }
          if ($rootCerts) {
            foreach ($c in $rootCerts) {
              Write-Host "Removing from Root: $($c.Thumbprint) - $($c.Subject)"
              Remove-Item -Path "Cert:\CurrentUser\Root\$($c.Thumbprint)" -Force -ErrorAction SilentlyContinue
            }
            Write-Host "✅ Removed temporary cert(s) from CurrentUser\\Root"
          } else {
            Write-Host "No InterviewAssistant cert found in CurrentUser\\Root"
          }

          # Remove from CurrentUser\My (imported PFX)
          $myCerts = Get-ChildItem Cert:\CurrentUser\My | Where-Object { $_.Subject -like "*CN=InterviewAssistant*" }
          if ($myCerts) {
            foreach ($m in $myCerts) {
              Write-Host "Removing from My: $($m.Thumbprint) - $($m.Subject)"
              Remove-Item -Path "Cert:\CurrentUser\My\$($m.Thumbprint)" -Force -ErrorAction SilentlyContinue
            }
            Write-Host "✅ Removed signing PFX from CurrentUser\\My"
          } else {
            Write-Host "No InterviewAssistant cert found in CurrentUser\\My"
          }

      - name: Bump version and create tag
        id: version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: patch

      - name: Generate checksum (SHA256) for release
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $exe = "dist\InterviewAssistant.exe"
          if (-not (Test-Path $exe)) { throw "$exe not found" }
          $hash = Get-FileHash -Path $exe -Algorithm SHA256
          $hash.Line | Out-File -FilePath dist\InterviewAssistant_SHA256.txt -Encoding ascii
          Write-Host "Checksum generated at dist\\InterviewAssistant_SHA256.txt"

      - name: Upload signed artifact
        uses: actions/upload-artifact@v4
        with:
          name: InterviewAssistant-signed
          path: |
            dist/InterviewAssistant.exe
            dist/InterviewAssistant_SHA256.txt

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.new_tag }}
          name: "InterviewAssistant ${{ steps.version.outputs.new_tag }}"
          files: |
            dist/InterviewAssistant.exe
            dist/InterviewAssistant_SHA256.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
